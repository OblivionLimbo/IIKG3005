1
00:00:00,000 --> 00:00:09,500
Okay, in the last video, we looked at Locals, where we put the main.tf, but of course it is possible to make it even more flexible than to hardcode Locals.

2
00:00:09,500 --> 00:00:24,160
We can then create a new file, which we call Locals.tf, and then we can move, for example, the Locals away from the main, and over to this Locals.tf.

3
00:00:24,160 --> 00:00:36,060
Of course, I remember that when we are going to start using a new config, we have to run Terraform init on the folder, so that we get all the new changes we make if we create a new file, variables, Terraform, main.tf, etc.

4
00:00:36,060 --> 00:00:39,160
Remember, all the files in here are one single config.

5
00:00:39,160 --> 00:00:52,360
And what we can do now is that if we are going to start using both Locals, Variables, and Terraform.tfvars, it will be quite complex and a bit difficult to keep your tongue straight suddenly.

6
00:00:52,360 --> 00:00:57,260
But the reason we do it is to make it as flexible as possible.

7
00:00:57,260 --> 00:01:07,260
So now we are going to look at a little example of how you can use both variables, Locals, using Variables.tf, Terraform.tfvars, and Locals.tf.

8
00:01:07,260 --> 00:01:27,160
The first thing I do is that I go to Variables, and then I create some new variables, so I call it, for example, company, type string, description company name, variable, and then we write, for example, project, like that.

9
00:01:27,160 --> 00:01:49,060
And then we can now put in that we take the company name over in Terraform.tfars, and then write learnIT, write project, and then we can write project--101, project Terraform, and so on.

10
00:01:49,060 --> 00:01:55,560
We save that, we save variables, and then we have Locals, which we are now going to change a little.

11
00:01:55,660 --> 00:02:10,260
Because then we have that one, which we have now moved to a variable, which is called for company here, and then we have the input to the variable here, we could of course have sent the input via command line, but we do it now via Terraform.tfvars.

12
00:02:10,260 --> 00:02:27,660
And then we take our Locals, and then we take and set it to company=var.company, and then we can also put project=var.project, but we may want to have some more here.

13
00:02:27,660 --> 00:02:39,960
And then it's great that we can, for example, then, this is a way we can get along with, or give a message, then, to Terraform, that we now should have input from Variables.

14
00:02:39,960 --> 00:02:52,660
So we use a dollar sign, and then we can then add on squirrely brackets, and then we can put that together with that one variable, so if we then take var.company.

15
00:02:52,660 --> 00:03:03,660
So what we've actually done here now, is that we've put together, we have to remember, let's see, we have to have squirrely brackets out of here, otherwise it will not interpret as much in the same string.

16
00:03:03,660 --> 00:03:11,760
So what we've done here now, we've written the project, the var.project name, and then we've added on company, and then how what order it should come in.

17
00:03:11,760 --> 00:03:24,360
We could have company, then we could have had project, like that. And what we do now, now we have that the company becomes var.company, and then we have that the project becomes var.company-var.project.

18
00:03:24,360 --> 00:03:30,560
So we put together the variable for company and project in one local variable.

19
00:03:30,560 --> 00:03:42,460
Something that can also be interesting to have, is, for example, billing code, or who is it that should be billed for this resource use in Azure.

20
00:03:42,460 --> 00:03:52,860
So it's a pretty important part when it comes to the use of sky resources, because when you use sky resources by expanding the resources in Azure, it is billed into NTNU,

21
00:03:52,860 --> 00:04:04,560
and then it is important that it comes down to the right institute, and then it is also the course unit that ultimately should be responsible for the costs that are generated in the subjects we have in IDI-AIT.

22
00:04:04,560 --> 00:04:10,360
And then we can now say here that under project, we can then have another variable.

23
00:04:10,360 --> 00:04:21,760
Variable, write billing code, and then we can take a string, like that, save over it, we take it with us, just like that.

24
00:04:21,760 --> 00:04:32,960
Billing code is often just a set with numbers, etc., that can represent what it has with the institute, division, in a company.

25
00:04:32,960 --> 00:04:38,460
Now we just put ID like that, just to make something, and save it.

26
00:04:38,460 --> 00:04:48,460
We can also write, that this can also be tags, it doesn't have to be the specific tag for it, but it can be more common tags,

27
00:04:48,560 --> 00:04:58,360
like that is what the tags we use for this deployment, which will then contain company name, and will contain project name,

28
00:04:58,360 --> 00:05:05,360
which makes it easier to just change this information if we are going to deploy this for another company with another name on it.

29
00:05:05,360 --> 00:05:11,160
So we take it with us in addition now, finally, billing code, we just take billing code, like that.

30
00:05:11,260 --> 00:05:21,260
Like that, then we will create everything, then we make sure that we have, as you can see, see the course materials, module 03,

31
00:05:21,260 --> 00:05:31,960
we take a terraform init, make sure everything is correct, we can also take a terraform format table, to make sure that the code is a little easier to read,

32
00:05:32,060 --> 00:05:41,560
and then we can also, in addition, take also terraform console, and then we do, for example, local.common_tags,

33
00:05:41,560 --> 00:05:47,960
then we see here that then we have tags that will be billing code, company, project, which can be inserted.

34
00:05:47,960 --> 00:05:56,760
If we are now going to put it here, then we can now go to the main.tf file of ours, and then we see here, here we have now the one from the last time we used,

35
00:05:56,760 --> 00:06:07,960
so if we then go here, then we write local, then we write common_tags, because it's going there, then we can also write local.common_tags on it.

36
00:06:07,960 --> 00:06:18,160
And then these resources will get their tags inserted, i.e. the information on the resources that are put out, with this information, i.e. company name, project,

37
00:06:19,160 --> 00:06:32,060
and the billing code for this project. So then I go to terraform plan -out=main.tfplan, we see two resources that are going to be created,

38
00:06:32,060 --> 00:06:41,660
we can as always double-check what they are in, it will then be the storage account that is created, so it will be the resource group, and here we see tags that will be inserted on it,

39
00:06:41,660 --> 00:06:53,260
and then we can just look here, and tags that are inserted on it, in order to the local. Here is the resource group name, which is from variable, and here is the name from variable,

40
00:06:53,260 --> 00:07:03,360
so here is the location from variable. Terraform apply "main.tfplan", like that, then it will deploy.

41
00:07:03,360 --> 00:07:14,660
And when the deployment is rolled out, we can now easily go to Azure Portal, we can also see here under resource groups, we see now that RG-demo-001 is deployed,

42
00:07:14,660 --> 00:07:27,360
and here we see that the storage account has come, and then we see tags on the resource group, billing code, company and project, and this is a nice way to structure your resources,

43
00:07:27,360 --> 00:07:36,560
and make sure that you easily find out who it is, for example, it can be the owner who is standing there, it can be billing code, who is going to be paid or billed for this resource,

44
00:07:36,560 --> 00:07:45,460
what company it is, and project, and the like. In the same way, we have also got this tag down to our storage account, because we also have codes.

45
00:07:45,460 --> 00:08:02,360
Tags are not the main purpose of this lesson, of course, it is to use variables, and to use locals in the main file, locals in the own file, variables, variables in the own file, and with Terraform.tfvars file.

46
00:08:02,360 --> 00:08:12,660
And that was actually what I was going to go through about locals, but as always, remember to run "terraform destroy" before you finish,

47
00:08:12,660 --> 00:08:23,960
so that you make sure that there are no resources to use money when you do not need it. Confirm, yes, I want to remove everything, then we just let it complete, and then we see that the resources are removed.

48
00:08:23,960 --> 00:08:26,960
Destroyed completed, then everything is in order.