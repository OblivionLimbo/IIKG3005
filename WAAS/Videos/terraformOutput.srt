1
00:00:00,000 --> 00:00:09,000
Now we are getting pretty well prepared to take a look at the modules, but before we can start looking at that, we should take a quick look at the outputs.

2
00:00:09,000 --> 00:00:18,000
Because it may be something when we start with the modules, that you have root modules and child modules, and possibly even more levels with child modules.

3
00:00:18,000 --> 00:00:33,000
It may be that you want to send information between these modules, which means that if you expand a network or link one module, you will have information from what has been expanded in that module over in the root module.

4
00:00:33,000 --> 00:00:39,000
We are not going to start with the module right now, but it's a bit tricky where we start first here.

5
00:00:39,000 --> 00:00:44,000
But we can look at the output first, and then we can think about how we can reuse this later.

6
00:00:44,000 --> 00:00:55,000
So what we are going to do is that we can create an output block, and then we can for example write here that it should be SAID.

7
00:00:55,000 --> 00:01:02,000
And then we can think that if we then wish that after making this storage edge, then we wish to know the ID.

8
00:01:02,000 --> 00:01:13,000
Of course, we cannot know the ID to this storage account before it has been created, so therefore we have to wait until this storage account has been created, until we can eventually find the ID.

9
00:01:13,000 --> 00:01:21,000
And then we see here that I get a pretty good suggestion now from CoPilot, what I actually need.

10
00:01:21,000 --> 00:01:27,000
And that's actually what it says here. I need value. What do I need of value?

11
00:01:27,000 --> 00:01:36,000
Yes, I need Azurerm Storage Account, SADemo, which is the name of this one. So it's this resource's ID.

12
00:01:36,000 --> 00:01:46,000
And if we take and write like this, then we see that we find a whole lot of attributes that we can actually list from or send to the output for a storage account.

13
00:01:46,000 --> 00:01:52,000
But in our case now, we take an ID as an example. Where can I find the attributes I can use?

14
00:01:52,000 --> 00:02:04,000
Yes, if we go to Terraform or registry.terraform.io, and then we go into Azure Documentation, then we can here write storage account, scroll down to storage.

15
00:02:04,000 --> 00:02:19,000
And then if we then search for attribute references, then we see here that we have all the things we can add on the backend to find that type of information when we run to an output.

16
00:02:19,000 --> 00:02:29,000
So here we had ID, and it could be, for example, if we run a network, then maybe we want to give that network IP range or something like that.

17
00:02:29,000 --> 00:02:38,000
And that's especially if you, for example, are going to set network rules on that network, then you would have the need to know the ID of that network.

18
00:02:38,000 --> 00:02:45,000
So that was actually what we needed to do now to get an output, but you have to check that it works.

19
00:02:45,000 --> 00:02:56,000
What is important to think about now is that a value on the output will not be shown in the beginning of the plan, because the resource does not exist when we run the plan.

20
00:02:56,000 --> 00:03:03,000
Therefore, we have to run the whole round with plan and apply.

21
00:03:03,000 --> 00:03:22,000
We run Terraform init, so we run Terraform plan -out main.tfplan. When the plan is ready, we run Terraform apply "main.tfplan"

22
00:03:22,000 --> 00:03:39,000
Changes to outputs: said, known after apply, plan two, two that are added, and then we can start to see here that the storage account and the resource group is what is being set up.

23
00:03:39,000 --> 00:03:59,000
And when we have run apply, then we see here that we have apply completed, resources 2 added, outputs, here we have said, and this is the whole ID that represents the storage account that we have just set up.

24
00:03:59,000 --> 00:04:05,000
Now we can go into the portal to see that our resource has been set up.

25
00:04:05,000 --> 00:04:14,000
Under resource groups, we can see here now, rgdemo001, satimdemo7643 If we click on that, we will then be able to find out.

26
00:04:14,000 --> 00:04:21,000
If we, for example, click on JSON view here, we see that we have the ID of the storage account, which is the same as we got the output.

27
00:04:21,000 --> 00:04:32,000
And then it's like that, if we were to have done anything more with the storage account there now, in Terraform, then we could have sent this output and used this in another context.

28
00:04:32,000 --> 00:04:41,000
If we were to have set up, configured, or done anything with this resource, then we can refer to this ID, so that we have been able to continue.

29
00:04:41,000 --> 00:04:50,000
Yes, if this resource has been set up in another module, then we can send this ID over to the root module, if we were to do anything more with this resource itself.

30
00:04:50,000 --> 00:04:55,000
That was actually what I was going to go through with you in connection with the output.

31
00:04:55,000 --> 00:05:06,000
Because then we can see here now, if we just enter one module 3, but maybe now in the next module 4, we will start to have one top root module with several sub-modules.

32
00:05:06,000 --> 00:05:14,000
That is to say a collection with Terraform files that makes up one configuration, a set of resources, etc.

33
00:05:14,000 --> 00:05:22,000
But as always, Terraform destroy at the end, and then we can see that we take out that one, confirm that we want it.

34
00:05:22,000 --> 00:05:30,000
And finally, we see now that the resource group and the resource group are deleted, and then we don't have to worry about something that will cost us in Azure.

